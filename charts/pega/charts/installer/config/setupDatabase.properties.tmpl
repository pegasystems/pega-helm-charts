# Properties file for use with Pega Deployment Utilities.
# For more information, see the Pega Platform help.

################### COMMON PROPERTIES - DB CONNECTION ##################
########################################################################

# CONNECTION INFORMATION
pega.jdbc.driver.jar={{ .Env.DRIVER_JAR_PATH }}
pega.jdbc.driver.class={{ .Env.JDBC_CLASS }}
pega.database.type={{ .Env.DB_TYPE }}
pega.jdbc.url={{ .Env.JDBC_URL }}
pega.jdbc.username={{ .Env.DB_USERNAME }}
pega.jdbc.password={{ .Env.DB_PASSWORD }}

pega.admin.password={{ .Env.ADMIN_PASSWORD }}

jdbc.custom.connection.properties={{ .Env.JDBC_CUSTOM_CONNECTION }}

# RULES SCHEMA NAME
rules.schema.name={{ .Env.RULES_SCHEMA }}

# DATA SCHEMA NAME
data.schema.name={{ .Env.DATA_SCHEMA }}

# CUSTOMER DATA SCHEMA NAME
customerdata.schema.name={{ .Env.CUSTOMERDATA_SCHEMA }}

# USER TEMP DIRECTORY
# Will use default if not set to valid directory
user.temp.dir=/opt/pega/temp

# z/OS SITE-SPECIFIC PROPERTIES FILE
pega.zos.properties={{ .Env.ZOS_PROPERTIES }}

# BYPASS UDF GENERATION?
bypass.udf.generation={{ .Env.BYPASS_UDF_GENERATION }}

# BYPASS AUTOMATICALLY TRUNCATING PR_SYS_UPDATESCACHE?
bypass.truncate.updatescache={{ .Env.BYPASS_TRUNCATE_UPDATESCACHE }}

# REBUILD DATABASE RULES INDEXES
rebuild.indexes={{ .Env.REBUILD_INDEXES }}

# SYSTEM NAME
system.name={{ .Env.SYSTEM_NAME }}

# PRODUCTION LEVEL
production.level={{ .Env.PRODUCTION_LEVEL }}

# MULTITENANT SYSTEM?
# A multitenant system allows organizations to act as separate Pega Platform installations
multitenant.system={{ .Env.MT_SYSTEM }}

# UPDATE EXISTING APPLICATIONS
update.existing.applications={{ .Env.UPDATE_EXISTING_APPLICATIONS }}

# UPDATE APPLICATIONS SCHEMA
update.applications.schema={{ .Env.UPDATE_APPLICATIONS_SCHEMA }}

# WORKLOAD MANAGER
db2zos.udf.wlm={{ .Env.DB2_ZOS_UDF_WLM }}

# RUN RULESET CLEANUP?
run.ruleset.cleanup={{ .Env.RUN_RULESET_CLEANUP }}

# CUSTOM CONFIGURATION PROPERTIES FILE
# The congfiguration files are dockerized using .tmpl files and are stored in opt/pega/config
# inside the container. 
{{ if not (isTrue (default .Env.CONFIG_FILES_IN_TEMP_DIR "false")) }}
pegarules.config=/opt/pega/kit/scripts/prconfig.xml
prbootstrap.config=/opt/pega/kit/scripts/prbootstrap.properties
{{ end }}
prlogging.config=/opt/pega/kit/scripts/prlog4j2.xml

# Create schema if absent flag - Only from Docker related deployments
pega.schema.autocreate=true
{{- if isTrue .Env.BYPASS_LOAD_ENGINE_CLASSES }}

# Load engine classes to database?
bypass.load.engine.classes={{ .Env.BYPASS_LOAD_ENGINE_CLASSES }}
{{- end }}
{{- if isTrue .Env.BYPASS_LOAD_ASSEMBLED_CLASSES }}

# Load assembly classes to database?
bypass.load.assembled.classes={{ .Env.BYPASS_LOAD_ASSEMBLED_CLASSES }}
{{- end }}

# Enable adminstrator user after upgrade by default.
upgrade.enable.admin=true

custom.jvm.args=-Xmx8g {{ .Env.CUSTOM_JVM_ARGS }}

# Enable the automatic resume parameter to support resuming rules_upgrade from point of failure.
automatic.resume={{ .Env.AUTOMATIC_RESUME_ENABLED }}

{{ .Env.ADVANCED_SETTINGS }}