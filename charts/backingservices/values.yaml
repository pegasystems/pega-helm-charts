---
global:
  imageCredentials:
    registry: "YOUR_DOCKER_REGISTRY"
    username: "YOUR_DOCKER_REGISTRY_USERNAME"
    password: "YOUR_DOCKER_REGISTRY_PASSWORD"
  # Specify the value of your Kubernetes provider
  k8sProvider: "YOUR_KUBERNETES_PROVIDER"

# Search and Reporting Service (SRS) Configuration
srs:
  # Set srs.enabled=true to enable SRS
  enabled: true

  deployment:
    # specify unique name for the deployment based on org app and/or srs applicable environment name. eg: acme-demo-dev-srs
    name: "YOUR_SRS_DEPLOYMENT_NAME"

  # Configure the location of the busybox image that is used during the deployment process of
  # the internal Elasticsearch cluster
  busybox:
    image: "alpine:3.20.2"
    imagePullPolicy: "IfNotPresent"

  srsRuntime:
    # Number of pods to provision
    replicaCount: 2

    # docker image of the srs-service, platform-services/search-n-reporting-service:dockerTag
    srsImage: "YOUR_SRS_IMAGE:TAG"

    # To avoid exposing Docker credentials, optionally create a separate Docker config secret.
    # Specify secret names as an array of comma-separated strings. For example: ["secret1", "secret2"]
    imagePullSecretNames: []

    env:
      # AuthEnabled may be set to true when there is an authentication mechanism in place between SRS and Pega Infinity.
      AuthEnabled: false
      # When `AuthEnabled` is `true`, enter the appropriate public key URL. When `AuthEnabled` is `false`(default), leave this parameter empty.
      OAuthPublicKeyURL: ""

    # Use this parameter to configure values for Java options.
    javaOpts: ""

    # Set to true if you require a highly secured connection that complies with NIST SP 800-53 and NIST SP 800-131. Otherwise, set to false.
    enableSecureCryptoMode: false

    # Apply securityContext to SRS pods. Example:
    # securityContext:
    #   runAsUser: 9999
    #   fsGroup: 0

    # Apply securityContext to SRS containers. Example:
    # containerSecurityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #     - ALL
    #   runAsNonRoot: true

    # The following section enables TLS/mTLS(https) for SRS.
    # Set srs.srsRuntime.ssl.enabled to true if you require a secure connection to srs (either TLS or mTLS).
    ssl:
      enabled: false
      # Set client-authentication to `want` to accept a client certificate if available, but not block access without one.
      # To require a client certificate for all requests, change to `need`.
      # To enforce mTLS, enable ssl and set client-authentication to 'need'.
      # For a simple TLS(HTTPS) mode, set client-authentication to 'want'.
      # Configure the required keystore and truststore file names along with the file type.
      # If mTLS is enforced at Elasticsearch/OpenSearch level as well, then ensure that you have the required certificates signed
      # onto the below truststore for establishing the secure connection between SRS and Elasticsearch/OpenSearch.
      # clientAuthentication: want
      # keystore:
      #   file: "srs-keystore.p12"
      #   type: "PKCS12"
      # truststore:
      #   file: "srs-truststore.jks"
      #   type: "JKS"
      # Here the type refers to the type/extension of the keystore/truststore. For example, PKCS12 or JKS.
      # To specify a keystore and a truststore using a secret, uncomment the below srs.srsRuntime.ssl.certsSecret parameter
      # and provide the secret name containing your certificates and their respective passwords.
      # Use the full name of the certificate files (together with file extension, for example, “keystore.p12”, “truststore.jks”)
      # as a key name in the secret. Use the respective key names
      # to configure the “srs.srsRuntime.ssl.keystore.file”, "srs.srsRuntime.ssl.truststore.file" parameters.
      # Specify the passwords of both the keystore and the truststore in the secret and use the key names “keystorePassword” for keystore password
      # and "truststorePassword" for truststore password in the secret.
      # If there is no password for the keystore/truststore, configure an empty string value('') to the passwords of keystore & truststore in the secret.
      # Even though the system uses secrets to read the certificates and passwords, you must still configure
      # "srs.srsRuntime.ssl.keystore.type" and "srs.srsRuntime.ssl.truststore.type" with the type of store file it is (for example, PKCS12 or JKS).
      # certsSecret: srs-ssl-certificates

  # This section specifies the elasticsearch cluster configuration.
  srsStorage:
    # Setting srsStorage.provisionInternalESCluster to true will provision an internal elasticsearch cluster using the configuration
    # specified in the `elasticsearch` section
    # If you do not enable SRS and the srs.enabled parameter is set to false, always set srs.srsStorage.provisionInternalESCluster=false
    provisionInternalESCluster: true
    # To use your own Elasticsearch/OpenSearch cluster, set srsStorage.provisionInternalESCluster to false and then
    # set the external Elasticsearch/OpenSearch cluster URL and port details below when using an externally managed Elasticsearch/OpenSearch
    # Ensure that the specified endpoint is accessible from the kubernetes cluster pods.
    # domain: ""
    # port: 9200
    # protocol: https
    # The Elasticsearch/OpenSearch connection supports three authentication methods: basic authentication ,
    # AWS IAM role-based authentication and Elasticsearch/OpenSearch secure connection(tls).
    # Set srs.srsStorage.tls.enabled: true to enable the use of TLS-based authentication to your Elasticsearch/OpenSearch service
    # The Elasticsearch/OpenSearch connection supports four authentication methods: basic authentication ,
    # AWS IAM role-based authentication, Elasticsearch/OpenSearch secure connection(tls) and secure connection with mutual TLS(mTLS).
    # Set srs.srsStorage.tls.enabled: true to enable the use of TLS-based authentication to your Elasticsearch/OpenSearch service
    # for both an internally-provisioned or externalized service in your SRS cluster.
    tls:
      enabled: false
    # To specify a certificate used to authenticate an external Elasticsearch/OpenSearch service (with tls.enabled: true and srsStorage.provisionInternalESCluster: false),
    # uncomment the following lines to specify the TLS certificate name with password for your Elasticsearch/OpenSearch service.
    # Default certificatePassword value will be empty if not used.
    # certificateName: "Certificate_Name"
    # certificatePassword: "password"
    # To specify a certificate using a secret, uncomment the certsSecret parameter and provide the secret name containing your certificate and certificate password.
    # Use the full name of the certificate file (together with file extension, for example, “certificate.p12” or “certificate.jks”) as a key name in the secret. Use this key name
    # to configure the “certificateName” parameter. Use a key name “password” to provide the certificate password in the secret.
    # certsSecret: srs-certificates

    # The following section specifies the mTLS configuration.
    # Set srs.srsStorage.mtls.enabled: true to enable the use of mTLS-based authentication to your Elasticsearch/OpenSearch service.
    # SRS to Elasticsearch/Opensearch mTLS is supported only with external Elasticsearch/OpenSearch. mTLS is not supported for internally-provisioned ES.
    # To enable mTLS between SRS and Elasticsearch/OpenSearch(External), enable the mTLS flag
    # and configure the truststore, the keystore, and their respective passwords of the external Elasticsearch/OpenSearch.
    # Note that the srs.srsRuntime.ssl.enabled flag above is used to enable tls/mTLS for SRS.
    # The srs.srsStorage.mtls.enabled flag below is used to specify that the Elasticsearch/Opensearch being used is enabled with mTLS
    # and all the communication will be through mutual TLS(mTLS) between SRS and Elasticsearch/OpenSearch.
    mtls:
      enabled: false
      # When srs.srsStorage.mtls.enabled is set to true, then for the mutual handshake between SRS and Elasticsearch/OpenSearch,
      # you need to configure the required keystore and truststore certificates.
      # The below certificate details are used for establishing mTLS between SRS and Elasticsearch/OpenSearch.
      # You can use the same keystore and truststore can that you configured above for SRS (srs.srsRuntime.ssl.key-store and srs.srsRuntime.ssl.trust-store)
      # or you can use a new keystore and truststore.
      # Ensure that you add the required CA certificates to the truststore to establish a secure
      # connection between SRS and Elasticsearch/OpenSearch in case of mTLS.
      # Uncomment the keystore and truststore details below and configure the required certificate paths.
      # NOTE :
      # You can use the same keystore and truststore if:
      # a) the CA certificate used for generating keystore and truststore for Elasticsearch/OpenSearch are the same as the one used for SRS.
      # b) the CA certificates used for SRS and ES are different but both the CA Certificates were signed against the truststore of ES and truststore of SRS.
      # Although the best practice is to use the SRS keystore and truststore (where the truststore is signed against both CA certificates of SRS and ES)
      # to establish connectivity between SRS and ES,
      # you can use a different keystore and truststore for establishing connectivity between SRS and ES.
      # To specify a different keystore and truststore using a secret, uncomment the below 'srs.srsStorage.mtls.certsSecret' parameter
      # and provide the secret name containing your certificates and their respective passwords.
      # Use the full name of the certificate files (together with file extension, for example, “keystore.p12” or “truststore.jks”)
      # as a key name in the secret. Use the respective key names
      # to configure the “srs.srsStorage.mtls.keystore.file” and "srs.srsStorage.mtls.truststore.file".
      # Specify the passwords of both keystore and truststore in the secret and use the key names
      # “keystorePassword” for keystore password and "truststorePassword" for truststore password in the secret.
      # If there is no password for the keystore/truststore, configure an empty string value('') to the passwords of the keystore and the truststore in the secret.
      # keystore:
      #   file: "es-keystore.p12"
      # truststore:
      #   file: "es-truststore.jks"
      # certsSecret: "es-ssl-certificates"

    # Set srs.srsStorage.basicAuthentication.enabled: true to enable the use of basic authentication to your Elasticsearch/OpenSearch service
    # for both an internally-provisioned or externalized service in your SRS cluster.
    basicAuthentication:
      enabled: true
    # To configure basic authentication or TLS-based authentication to your externally-managed Elasticsearch/OpenSearch service in your SRS cluster,
    # uncomment and add the parameter details: srs.srsStorage.authCredentials.username and srs.srsStorage.authCredentials.password
    # Auth Credentials added under authCredentials field which supports both Elasticsearch and OpenSearch credentials.
    # authCredentials:
    #   username: "username"
    #   password: "password"
    # for your externally managed Elasticsearch cluster.
    # uncomment and add the parameter details: srs.srsStorage.esCredentials.username and srs.srsStorage.esCredentials.password for your externally managed Elasticsearch cluster.
    # esCredentials will be deprecated in future releases, so use authCredentials instead.
    # esCredentials:
    #   username: "username"
    #   password: "password"
    # To use a secret to configure basic authentication or TLS-based authentication between your external Elasticsearch/OpenSearch service and SRS,
    # uncomment the authSecret parameter and set it to the secret name. Use "username" and "password" as keys for your secret.
    # authSecret: srs-elastic-credentials
    # To configure AWS IAM role-based authentication to your externally-managed Elasticsearch/OpenSearch cluster, uncomment
    # and add the parameter details: srs.srsStorage.awsIAM and its associated region, srs.srsStorage.awsIAM.region
    # awsIAM:
    #   region: "AWS_ELASTICSEARCH_REGION"/"AWS_OPENSEARCH_REGION"
    # Set srs.srsStorage.networkPolicy.enabled: false to disable network policy for the SRS service. The default value is true.
    networkPolicy:
      enabled: true
    # To configure either authentication method, when the Elasticsearch/OpenSearch domain requires an open internet connection,
    # set the requireInternetAccess parameter to "true".
    requireInternetAccess: false

constellation:
  enabled: false

constellation-messaging:
  enabled: false
  deployment:
    name: YOUR_MESSAGING_SERVICE_DEPLOYMENT_NAME
  docker:
    messaging:
      image: YOUR_MESSAGING_SERVICE_IMAGE:TAG
  replicas: 1

# This section specifies the configuration for deploying an internal elasticsearch cluster for use with SRS.
# The configuration for rest of the values defined under 'elasticsearch' are to define the elasticsearch cluster
# based on helm charts defined at https://github.com/elastic/helm-charts/tree/master/elasticsearch and may be modified
# as per runtime and storage requirements.
elasticsearch:
  # For internally provisioned Elasticsearch server, the imageTag parameter is set by default to 7.17.9, which is the
  # recommended Elasticsearch server version for k8s version >= 1.25.
  # Use this parameter to change it to 7.10.2 or 7.16.3 for k8s version < 1.25 and make sure to update the Elasticsearch helm chart version in requirements.yaml.
  imageTag: 7.17.9
  # Permit co-located instances for solitary minikube virtual machines.
  antiAffinity: "soft"
  # Shrink default JVM heap.
  esJavaOpts: "-Xmx1024m -Xms1024m"
  # Allocate smaller chunks of memory per pod.
  # This section specifies the elasticsearch cluster configuration for authentication and TLS.
  # If you previously set srs.srsStorage.tls.enabled: true (or) srs.srsStorage.mtls.enabled: true, you must uncomment the line to use protocol: https parameter.
  # protocol: https

  # Uncomment the below lines if you want to deploy/upgrade Elasticsearch server version >= 8.x
  # createCert: false
  # secret:
  #   enabled: false
  # protocol: http

  # For deployments that use TLS-based authentication to an internal Elasticsearch service in the SRS cluster,
  # uncomment and appropriately add below lines under esConfig.elasticsearch.yml.
  # xpack.security.http.ssl.enabled: true
  # xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
  # xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12

  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    # Uncomment the below lines if you want to deploy/upgrade Elasticsearch server version >= 8.x by adding below lines under esConfig.elasticsearch.yml.
    # action.destructive_requires_name: false
    # ingest.geoip.downloader.enabled: false

  # Use this section to include additional, supported environmental variables for Elasticsearch basic authentication.
  # The parameter values can be read from a specified secrets file.
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: srs-elastic-credentials
          key: password
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          name: srs-elastic-credentials
          key: username

  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "2000m"
      memory: "3Gi"

  volumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    resources:
      requests:
        # configure volume size of the elasticsearch nodes based on search data storage requirements. The default storage size from elasticsearch is 30Gi.
        storage: 30Gi

  # elasticsearch.secretMounts will help reading certificates from elastic-certificates secret.
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
# For Openshift deployments, you must enable the following custom values. For details
# refer to https://github.com/elastic/helm-charts/tree/master/elasticsearch/examples/openshift.
#  securityContext:
#    runAsUser: null
#  podSecurityContext:
#    fsGroup: null
#    runAsUser: null
#  sysctlInitContainer:
#    enabled: false
