{{ if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "srs.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- include "srs.srs-service.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.srsRuntime.replicaCount }}
  selector:
    matchLabels:
{{- include "srs.srs-service.match-labels" . | indent 6 }}
  template:
    metadata:
      labels:
{{- include "srs.srs-service.match-labels" . | indent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ template "srsRegistrySecretName" . -}}
        {{ if .Values.srsRuntime.imagePullSecretNames }}
        {{- range .Values.srsRuntime.imagePullSecretNames }}
        - name: {{ . }}
        {{- end -}}
        {{ end }}
      containers:
        - name: srs-service
          image: {{ .Values.srsRuntime.srsImage }}
          imagePullPolicy: {{ .Values.srsRuntime.imagePullPolicy }}
          ports:
            - name: srs-port
              containerPort: 8080
              protocol: TCP
          {{- if .Values.srsStorage.tls.enabled }}
          volumeMounts:
            - name: srs-certificates
              mountPath: /usr/share/
          {{ end }}
          readinessProbe:
            httpGet:
              path: /health
              port: srs-port
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 5
            timeoutSeconds: 30
          env:
            - name: ELASTICSEARCH_HOST
              value: {{ template "elasticsearch.domain" . }}
            - name: ELASTICSEARCH_PORT
              value: {{ template "elasticsearch.port" . }}
            - name: ELASTICSEARCH_PROTO
              value:  {{ template "elasticsearch.protocol" . }}
            - name: ELASTICSEARCH_AUTH_PROVIDER
              value: {{ template "elasticsearch.authProvider" .}}
            {{- if eq (include "elasticsearch.authProvider" $) "aws-iam" }}
            - name: ELASTICSEARCH_REGION
              value: {{ template "elasticsearch.region" .}}
            {{- end}}
            {{- if eq (include "elasticsearch.authProvider" $) "basic-authentication" }}
            - name: ELASTICSEARCH_USERNAME
              valueFrom:
               secretKeyRef:
                  name: "{{ .Values.srsStorage.authSecret | default "srs-elastic-credentials"}}"
                  key: username
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.srsStorage.authSecret | default "srs-elastic-credentials"}}"
                  key: password
            {{- end}}
            {{- if eq (include "elasticsearch.authProvider" $) "tls" }}
            - name: ELASTICSEARCH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.srsStorage.authSecret | default "srs-elastic-credentials"}}"
                  key: username
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.srsStorage.authSecret | default "srs-elastic-credentials"}}"
                  key: password
            - name: PATH_TO_TRUSTSTORE
              value: "/usr/share/{{ .Values.srsStorage.certificateName | default "elastic-certificates.p12"}}"
            {{ if not .Values.srsStorage.certsSecret }}
            - name: PATH_TO_KEYSTORE
              value: "{{ .Values.srsStorage.certificatePassword | default ""}}"
            {{ else }}
            - name: PATH_TO_KEYSTORE
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.srsStorage.certsSecret | default "srs-certificates"}}"
                  key: password
            {{- end }}
            {{- end}}
            - name: APPLICATION_HOST
              value: "0.0.0.0"
            - name: APPLICATION_PORT
              value: "8080"
            - name: AUTH_ENABLED
              value: "{{ .Values.srsRuntime.env.AuthEnabled | default "false" }}"
            - name: OAUTH_PUBLIC_KEY_URL
              value: {{ template "oAuthPublicKeyUrl" .}}
            - name: PUBLIC_KEY_URL
              value: ""
            - name: HIGH_SECURE_CRYPTO_MODE_ENABLED
              value: "{{ .Values.srsRuntime.enableSecureCryptoMode | default "false" }}"
            - name: JAVA_OPTS
              value: {{ template "javaOpts" .}}
          resources:
            {{- toYaml .Values.srsRuntime.resources | nindent 12 }}
      {{- if .Values.srsStorage.tls.enabled }}
      volumes:
      - name: srs-certificates
        secret:
          secretName: "{{ .Values.srsStorage.certsSecret | default "srs-certificates"}}"
      {{ end }}
      {{- if .Values.srsStorage.provisionInternalESCluster }}
      initContainers:
      - name: wait-for-internal-es-cluster
        image: {{ .Values.busybox.image }}
        imagePullPolicy: {{ .Values.busybox.imagePullPolicy }}
    {{- if .Values.srsStorage.tls.enabled }}
        args:
          - until $(wget -q -S --spider --timeout=2 -O /dev/null $ELASTICSEARCH_PROTO://$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD@$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT --no-check-certificate); do nslookup -type=ns $ELASTICSEARCH_HOST && echo Waiting for Elasticsearch cluster to become live...; sleep 10; done;
        command:
          - sh
          - -c
  {{ else }}
        args:
          - until $(wget -q -S --spider --timeout=2 -O /dev/null $ELASTICSEARCH_PROTO://$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD@$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT ); do nslookup -type=ns $ELASTICSEARCH_HOST && echo Waiting for Elasticsearch cluster to become live...; sleep 10; done;
        command:
          - sh
          - -c
    {{ end }}
        env:
          - name: ELASTICSEARCH_PROTO
            value: {{ template "elasticsearch.protocol" . }}
          - name: ELASTICSEARCH_HOST
            value: {{ template "elasticsearch.domain" . }}
          - name: ELASTICSEARCH_PORT
            value: {{ template "elasticsearch.port" . }}
          - name: ELASTICSEARCH_USERNAME
            valueFrom:
              secretKeyRef:
                name: srs-elastic-credentials
                key: username
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: srs-elastic-credentials
                key: password
      {{ end }}
{{- include "podAffinity" .Values.srsRuntime | indent 6 }}
{{- include "tolerations" .Values.srsRuntime | indent 6 }}
  {{ end }}
