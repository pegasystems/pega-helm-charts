---
# Default values for srs-search.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
enabled: true
deploymentName: pega-shared-srs

# srs-service configuration
srsRuntime:
  replicaCount: 2
  # docker image of the srs-service, platform-services/search-n-reporting-service:dockerTag
  srsImage: "YOUR_SRS_IMAGE:TAG"
  # To avoid exposing Docker credentials, optionally create a separate Docker config secret.
  # Specify secret names as an array of comma-separated strings. For example: ["secret1", "secret2"]
  imagePullSecretNames: []
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1300m
      memory: "4Gi"
    requests:
      cpu: 650m
      memory: "4Gi"
  serviceType: "ClusterIP"
  env:
    # AuthEnabled may be set to true when there is an authentication mechanism in place between SRS and Pega Infinity.
    AuthEnabled: false
    # When `AuthEnabled` is `true`, enter the appropriate public key URL. When `AuthEnabled` is `false`(default), leave this parameter empty.
    OAuthPublicKeyURL: ""

  # Set to true if you require a highly secured connection that complies with NIST SP 800-53 and NIST SP 800-131. Otherwise, set to false.
  enableSecureCryptoMode: false

  # The following sections helps in enabling TLS/mTLS(https) for SRS.
  # Set srs.srsRuntime.ssl.enabled to true if you require a secure connection to srs (either TLS or mTLS)
  ssl:
    enabled: false
    # Set client-authentication to `want`, i.e., accept a client certificate if available, but don’t block access without one.
    # To require a client certificate for all requests, change to `need`.
    # To enforce mTLS enable ssl and set client-authentication to 'need'
    # And for a simple TLS(Https) mode, set client-authentication to 'want'
    # Pass the required keystore & truststore paths and their passwords along with the file type.
    # If mTLS is enforced at Elasticsearch/OpenSearch level, make sure to have the required certificates signed
    # onto the truststore for establishing the secure connection between SRS and Elasticsearch/OpenSearch
    # clientAuthentication: want
    # keystore:
    #   file: "srs-keystore.p12"
    #   password: ""
    #   type: "PKCS12"
    # truststore:
    #   file: "srs-truststore.jks"
    #   password: ""
    #   type: "JKS"
    # Here type refers to the type/extension of the keystore/truststore. Ex : PKCS12, JKS
    # To specify a keystore & truststore using a secret, uncomment the below srs.srsRuntime.ssl.certsSecret parameter
    # and provide the secret name containing your certificates and their respective passwords.
    # Use the full name of the certificate files (together with file extension, for example, “keystore.p12”, “truststore.jks”)
    # as a key name in the secret. Use the respective key names
    # to configure the “srs.srsRuntime.ssl.keystore.file”, "srs.srsRuntime.ssl.truststore.file" parameters.
    # Specify the passwords of both keystore & truststore in the secret and use the key names “keystorePassword” for keystore password
    # and "truststorePassword" for truststore password in the secret.
    # If there is no password for the keystore/truststore, please pass empty string value('') to the passwords of keystore & truststore in the secret.
    # Despite the certificates and passwords being passed through secrets, you must still configure
    # "srs.srsRuntime.ssl.keystore.type" and "srs.srsRuntime.ssl.truststore.type" with the type of store file it is (Ex : PKCS12, JKS)
    # certsSecret: srs-ssl-certificates

  # Use this parameter to configure values for Java options.
  javaOpts: ""

  # Apply securityContext to SRS pods. Example:
  # securityContext:
  #   runAsUser: 9999
  #   fsGroup: 0

  # Apply securityContext to SRS containers. Example:
  # containerSecurityContext:
  #   allowPrivilegeEscalation: false
  #   capabilities:
  #     drop:
  #     - ALL
  #   runAsNonRoot: true

# By default we enable SRS network policy.
srsStorage:
  # Set srs.srsStorage.tls.enabled: true to enable the use of TLS-based authentication to your Elasticsearch/OpenSearch service
  # whether is it running as an internalized or externalized service in your SRS cluster.
  tls:
    enabled: false
  # To specify a certificate used to authenticate an external Elasticsearch/OpenSearch service (with tls.enabled: true and srsStorage.provisionInternalESCluster: false),
  # uncomment the following lines to specify the TLS certificate name with password for your Elasticsearch/OpenSearch service.
  # Default certificatePassword value will be empty if not used.
  # certificateName: "Certificate_Name"
  # certificatePassword: "password"
  # To specify a certificate using a secret, uncomment the certsSecret parameter and provide the secret name containing your certificate and certificate password.
  # Use the full name of the certificate file (together with file extension, for example, “certificate.p12” or “certificate.jks”) as a key name in the secret. Use this key name
  # to configure the “certificateName” parameter. Use a key name “password” to provide the certificate password in the secret.
  # certsSecret: srs-certificates

  # The following section specifies the mTLS information
  # Set srs.srsStorage.mtls.enabled: true to enable the use of mTLS-based authentication to your Elasticsearch/OpenSearch service
  # SRS to Elasticsearch/Opensearch mTLS is supported only with external Elasticsearch/OpenSearch. mTLS is not supported for internal ES.
  # In order to enable mTLS between SRS and Elasticsearch/OpenSearch(External), enable the mTLS flag
  # and pass the truststore, keystore and their respective passwords of the external Elasticsearch/OpenSearch
  # Note that above srs.srsRuntime.ssl.enabled flag is used to enabled tls/mTLS for SRS.
  # The below srs.srsStorage.mtls.enabled flag is used specify that the Elasticsearch/Opensearch being used is enabled with mTLS
  # and all the communication will be through mutual TLS(mTLS) between SRS and Elasticsearch/OpenSearch.
  mtls:
    enabled: false
    # When srs.srsStorage.mtls.enabled is set to true, then for the mutual handshake between SRS and Elasticsearch/OpenSearch,
    # we need to pass the required keystore and truststore certificates.
    # The below certificate details are used for establishing mTLS between SRS and Elasticsearch/OpenSearch
    # The keystore and truststore can either be the same as passed above for SRS (srs.srsRuntime.ssl.key-store & srs.srsRuntime.ssl.trust-store) or can be different altogether.
    # Make sure to have the required CA certificates added to the truststore being passed here as this will be used for a secure
    # connection between SRS and Elasticsearch/OpenSearch in case of mTLS.
    # Uncomment the below key-store and trust-store details and pass the required certificate paths and their passwords
    # NOTE :
    # Technically if either one of the below pointers is satisfied, then we can use the same keystore and truststore here:
    # a) if the CA certificate used for generating keystore and truststore for Elasticsearch/OpenSearch are same as the one used for SRS,
    # b) CA certificates used for SRS and ES are different but, both the CA Certificates were signed against the truststore of ES and truststore of SRS
    # Though the recommended way is to use keystore & truststore of SRS(where the truststore is signed against both CA certificates of SRS and ES)
    # to establish connectivity between SRS and ES,
    # you can use a different keystore and truststore for establishing connectivity between SRS and ES.
    # To specify a different keystore & truststore using a secret, uncomment the below 'srs.srsStorage.mtls.certsSecret' parameter
    # and provide the secret name containing your certificates and their respective passwords.
    # Use the full name of the certificate files (together with file extension, for example, “keystore.p12”, “truststore.jks”)
    # as a key name in the secret. Use the respective key names
    # to configure the “srs.srsStorage.mtls.keystore.file”, "srs.srsStorage.mtls.truststore.file"
    # Specify the passwords of both keystore & truststore in the secret and use the key names
    # “keystorePassword” for keystore password and "truststorePassword" for truststore password in the secret.
    # keystore:
    #   file: "es-keystore.p12"
    #   password: ""
    # truststore:
    #   file: "es-truststore.jks"
    #   password: ""
    # certsSecret: "es-ssl-certificates"

  # Set srs.srsStorage.basicAuthentication.enabled: true to enable the use of basic authentication to your Elasticsearch/OpenSearch service
  # whether is it running as an internalized or externalized service in your SRS cluster.
  basicAuthentication:
    enabled: true
  # To configure basic authentication or TLS-based authentication to your externally-managed Elasticsearch/OpenSearch service in your SRS cluster,
  # uncomment and add the parameter details: srs.srsStorage.authCredentials.username and srs.srsStorage.authCredentials.password
  # Auth Credentials added under authCredentials field which supports both Elasticsearch and OpenSearch credentials.
  # authCredentials:
  #   username: "username"
  #   password: "password"
  # for your externally managed Elasticsearch cluster.
  # uncomment and add the parameter details: srs.srsStorage.esCredentials.username and srs.srsStorage.esCredentials.password for your externally managed elasticsearch cluster.
  # esCredentials will be deprecated in future releases, please switch to authCredentials.
  # esCredentials:
  #   username: "username"
  #   password: "password"
  # To use a secret to configure basic authentication or TLS-based authentication between your external Elasticsearch/OpenSearch service and SRS,
  # uncomment the authSecret parameter and set it to the secret name. Use "username" and "password" as keys for your secret.
  # authSecret: srs-elastic-credentials
  # To configure AWS IAM role-based authentication to your externally-managed Elasticsearch/OpenSearch cluster, uncomment
  # and add the parameter details: srs.srsStorage.awsIAM and its associated region, srs.srsStorage.awsIAM.region
  # awsIAM:
  #   region: "AWS_ELASTICSEARCH_REGION"/"AWS_OPENSEARCH_REGION"
  # Set srs.srsStorage.networkPolicy.enabled: false to disable network policy for the SRS service. The default value is true.
  networkPolicy:
    enabled: true
